package com.xiaoyi.ssm.controller.app;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xiaoyi.ssm.dto.ApiMessage;
import com.xiaoyi.ssm.model.Member;
import com.xiaoyi.ssm.service.MemberService;
import com.xiaoyi.ssm.util.Global;
import com.xiaoyi.ssm.util.HttpUtils;
import com.xiaoyi.ssm.util.RedisUtil;
import com.xiaoyi.ssm.util.Utils;
import com.xiaoyi.ssm.wxPay.WXConfig;

/**  
 * @Description: 手机客户端公告接口
 * @author 宋高俊  
 * @date 2018年10月19日 下午8:22:24 
 */ 
@Controller("appApiCommonController")
@RequestMapping("app/common")
public class ApiCommonController {
	
    private static Logger logger = Logger.getLogger(ApiCommonController.class.getName());
	@Autowired
	private MemberService memberService;

	/**  
	 * @Description: 客户端使用code换取openid
	 * @author 宋高俊  
	 * @param request
	 * @param code
	 * @return 
	 * @date 2018年10月19日 下午8:28:04 
	 */ 
	@RequestMapping(value = "/codeAndAccessToken", method = RequestMethod.POST)
	@ResponseBody
	public ApiMessage codeAndAccessToken(HttpServletRequest request, String code) {
		logger.info("开始获取客户端openid");
		JSONObject getCodeResultJson = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			logger.info("开始根据code获取客户端openid");
			String requestUrl = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code"
					.replace("APPID", WXConfig.appid_web).replace("SECRET", WXConfig.appSecret_web).replace("JSCODE", code);

			String requestResult = HttpUtils.sendGet(requestUrl, null);// 我们需要自己写或者在网上找一个doGet方法发送doGet请求
			getCodeResultJson = JSONObject.fromObject(requestResult);// 把请求成功后的结果转换成JSON对象
			
			logger.info("APP登录的返回信息：getCodeResultJson:" + getCodeResultJson.toString());
			if (getCodeResultJson == null || getCodeResultJson.get("errcode") != null || getCodeResultJson.getString("openid") == null) {
				logger.error("", new Exception("获取回调异常"));
				return new ApiMessage(400, "登录失败", getCodeResultJson);
			}
			String access_token = getCodeResultJson.getString("access_token");
			String refresh_token = getCodeResultJson.getString("refresh_token");
			String openid = getCodeResultJson.getString("openid");
			String unionid = getCodeResultJson.getString("unionid");
			// 微信授权域snsapi_userinfo

			Member member = memberService.selectByUnionid(unionid);
			
			// 获取用户信息
			String userinfo = "https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID"
					.replace("ACCESS_TOKEN", getCodeResultJson.getString("access_token")).replace("OPENID", openid);
			String userinfoReturn = HttpUtils.sendGet(userinfo, null);// 我们需要自己写或者在网上找一个doGet方法发送doGet请求
			
			JSONObject getUserinfoJson = JSONObject.fromObject(userinfoReturn);// 把请求成功后的结果转换成JSON对象
			if (getUserinfoJson == null || getUserinfoJson.get("errcode") != null || getUserinfoJson.getString("openid") == null) {
				logger.error("", new Exception("获取用户信息回调异常"));
				member = new Member();
				member.setId(Utils.getUUID());
				member.setCreatetime(new Date());
				member.setModifytime(new Date());
				member.setUnionid(unionid);
				member.setAppopenid(openid);
				memberService.insertSelective(member);
				// 保存用户登录信息
				RedisUtil.addRedis(Global.redis_member, unionid, member);
			}else {
				logger.info("返回用户信息：getUserinfoJson:" + getUserinfoJson.toString());
				
				// 将openid作为key存储登录信息
				RedisUtil.addRedis(Global.REDIS_WXAPP_SESSION, unionid, getCodeResultJson);
				map.put("token", unionid);
				if (member != null) {
					map.put("appavatarurl", getUserinfoJson.getString("headimgurl"));
					map.put("appnickname", getUserinfoJson.getString("nickname"));
					member.setUnionid(unionid);
					member.setAppopenid(openid);
					member.setAppavatarurl("headimgurl");
					member.setAppnickname("nickname");
					member.setAppopenid(openid);
					memberService.updateByPrimaryKeySelective(member);
					// 保存用户登录信息
					RedisUtil.addRedis(Global.redis_member, unionid, member);
				}else {
					member = new Member();
					member.setId(Utils.getUUID());
					member.setCreatetime(new Date());
					member.setModifytime(new Date());
					member.setAppavatarurl(getUserinfoJson.getString("headimgurl"));
					member.setAppnickname(getUserinfoJson.getString("nickname"));
					member.setAppgender(getUserinfoJson.getInt("sex"));
					member.setUnionid(unionid);
					member.setAppopenid(openid);
					memberService.insertSelective(member);
					// 保存用户登录信息
					RedisUtil.addRedis(Global.redis_member, unionid, member);
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return new ApiMessage(200, "登录成功", map);
	}

}
