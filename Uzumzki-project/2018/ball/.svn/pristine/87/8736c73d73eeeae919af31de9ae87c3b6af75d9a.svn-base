package com.xiaoyi.ssm.controller;

import java.io.IOException;
import java.io.InputStream;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.xiaoyi.ssm.dto.AdminMessage;
import com.xiaoyi.ssm.dto.AdminPage;
import com.xiaoyi.ssm.dto.ApiMessage;
import com.xiaoyi.ssm.model.City;
import com.xiaoyi.ssm.model.District;
import com.xiaoyi.ssm.model.Staff;
import com.xiaoyi.ssm.model.TrainCoach;
import com.xiaoyi.ssm.model.TrainTeam;
import com.xiaoyi.ssm.model.TrainTeamVenue;
import com.xiaoyi.ssm.model.Venue;
import com.xiaoyi.ssm.model.VenueCheck;
import com.xiaoyi.ssm.model.VenueEnter;
import com.xiaoyi.ssm.model.VenueLog;
import com.xiaoyi.ssm.service.CityService;
import com.xiaoyi.ssm.service.CoachService;
import com.xiaoyi.ssm.service.DistrictService;
import com.xiaoyi.ssm.service.FieldService;
import com.xiaoyi.ssm.service.TrainCoachService;
import com.xiaoyi.ssm.service.TrainTeamService;
import com.xiaoyi.ssm.service.VenueCheckService;
import com.xiaoyi.ssm.service.VenueEnterService;
import com.xiaoyi.ssm.service.VenueErrorService;
import com.xiaoyi.ssm.service.VenueLogService;
import com.xiaoyi.ssm.service.VenueService;
import com.xiaoyi.ssm.service.VenueTemplateService;
import com.xiaoyi.ssm.util.ChineseCharacterUtil;
import com.xiaoyi.ssm.util.DateUtil;
import com.xiaoyi.ssm.util.Global;
import com.xiaoyi.ssm.util.HttpUtils;
import com.xiaoyi.ssm.util.ImportExcelUtil;
import com.xiaoyi.ssm.util.RedisUtil;
import com.xiaoyi.ssm.util.StringUtil;
import com.xiaoyi.ssm.util.Utils;

/**
 * @Description: 场馆控制器
 * @author 宋高俊
 * @date 2018年8月18日 上午11:35:49
 */
@Controller(value = "adminVenueController")
@RequestMapping(value = "/admin/venue")
public class VenueController {

	private final Logger logger = Logger.getLogger(this.getClass());

	@Autowired
	private VenueService venueService;
	@Autowired
	private FieldService fieldService;
	@Autowired
	private CoachService coachService;
	@Autowired
	private VenueTemplateService venueTemplateService;
	@Autowired
	private VenueLogService venueLogService;
	@Autowired
	private CityService cityService;
	@Autowired
	private DistrictService districtService;
	@Autowired
	private VenueCheckService venueCheckService;
	@Autowired
	private VenueErrorService venueErrorService;
	@Autowired
	private VenueEnterService venueEnterService;
	@Autowired
	private TrainTeamService trainTeamService;
	@Autowired
	private TrainCoachService trainCoachService;

	/**
	 * @Description: 场馆页面
	 * @author song
	 * @date 2018年8月14日 下午7:02:41
	 */
	@RequestMapping(value = "/listview")
	public String listview() {
		return "admin/venue/list";
	}

	/**
	 * @Description: 场馆数据
	 * @author song
	 * @date 2018年8月14日 下午7:04:09
	 */
	@RequestMapping(value = "/list")
	@ResponseBody
	public AdminMessage list(AdminPage adminPage) {
		PageHelper.startPage(adminPage.getPage(), adminPage.getLimit());
		List<Venue> venues = venueService.selectByAll(null);
		PageInfo<Venue> pageInfo = new PageInfo<>(venues);
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < venues.size(); i++) {
			Venue venue = venues.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", venue.getId());// ID
			map.put("city", venue.getCityT().getCity());// 城市
			map.put("district", venue.getDistrictT().getDistrict());// 区县
			map.put("name", venue.getName());// 场馆
			if (venue.getType() != null) {
				map.put("type", venue.getType() == 1 ? "网球场" : venue.getType() == 2 ? "足球场" : venue.getType() == 3 ? "羽毛球馆" : venue.getType() == 4 ? "篮球场"
						: "无");// 类型
			} else {
				map.put("type", "无");
			}
			map.put("trainteam", venue.getTrainteam() != null ? "是" : "否"); // 入驻
			if (venue.getLongitude() != null && venue.getLatitude() != null) {
				map.put("lnglat", "是"); // 坐标
			}else {
				map.put("lnglat", "否"); // 坐标
			}
			
			map.put("tel", venue.getTel() != null ? "是" : "否"); // 电话
			map.put("venueError", venueErrorService.countByVenue(venue.getId())); // 报错
			
			map.put("fieldSum", fieldService.countByVenue(venue.getId()));// 场地
			map.put("coachSum", coachService.countByVenue(venue.getId()));// 教练
			map.put("venueTemplateSum", venueTemplateService.countByVenue(venue.getId()));// 模板
			map.put("venuelogSum", venueLogService.countByVenue(venue.getId()));// 日志
			map.put("showflag", venue.getShowflag() == 1 ? "正常" : "屏蔽"); // 状态(0=审核中1=正常2=屏蔽)
			map.put("lng", venue.getLongitude());// 经度
			map.put("lat", venue.getLatitude());// 维度
			listMap.add(map);
		}
		return new AdminMessage(pageInfo.getTotal(), listMap);
	}

	/**  
	 * @Description: 场馆修改页面
	 * @author 宋高俊  
	 * @param model
	 * @param id
	 * @return 
	 * @date 2018年10月22日 下午7:51:12 
	 */ 
	@RequestMapping(value = "/update/view")
	public String updateView(Model model, String id) {
		Venue venue = venueService.selectByPrimaryKey(id);
		model.addAttribute("venueid", id);
		model.addAttribute("venueno", venue.getVenueno());
		model.addAttribute("cityid", venue.getCityid());
		model.addAttribute("districtid", venue.getDistrictid());
		model.addAttribute("showflag", venue.getShowflag());
		model.addAttribute("name", venue.getName());
		model.addAttribute("tel", venue.getTel());
		model.addAttribute("image", venue.getImage());

		List<City> list = cityService.selectByAll(null);
		model.addAttribute("citys", list);
		
		return "admin/venue/edit";
	}
	
	/**  
	 * @Description: 场馆修改页面
	 * @author 宋高俊  
	 * @param model
	 * @param id
	 * @return 
	 * @date 2018年10月22日 下午7:51:12 
	 */ 
	@RequestMapping(value = "/update/venue")
	@ResponseBody
	public ApiMessage updateVenue(String id, String cityid, String districtid, Integer showflag, String venuename, String phone) {
		Venue venue = venueService.selectByPrimaryKey(id);
		venue.setCityid(cityid);
		venue.setDistrictid(districtid);
		venue.setShowflag(showflag);
		venue.setName(venuename);
		venue.setTel(phone);
		venueService.updateByPrimaryKeySelective(venue);
		return new ApiMessage(200, "修改成功");
	}

	/**
	 * @Description: 场馆日志数据
	 * @author 宋高俊
	 * @date 2018年8月20日 下午2:19:17
	 */
	@RequestMapping(value = "/venueloglist")
	@ResponseBody
	public AdminMessage venueloglist(String venueid) {
		List<VenueLog> list = venueLogService.selectByVenue(venueid);
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < list.size(); i++) {
			VenueLog venueLog = list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", venueLog.getId());// ID
			map.put("createtime", DateUtil.getFormat(venueLog.getCreatetime()));// 时间
			map.put("manager", venueLog.getMember().getAppnickname());//操作人
			map.put("content", venueLog.getContent());// 内容
			listMap.add(map);
		}
		return new AdminMessage(100, list.size(), listMap);
	}
	
	/**  
	 * @Description: 场馆日志所有数据
	 * @author 宋高俊  
	 * @param selectType
	 * @param keyword
	 * @return 
	 * @date 2018年10月15日 下午4:00:48 
	 */ 
	@RequestMapping(value = "/venuelogAllList")
	@ResponseBody
	public AdminMessage venuelogAllList(AdminPage adminPage, Integer selectType,String keyword) {
		PageHelper.startPage(adminPage.getPage(), adminPage.getLimit());
		
		List<VenueLog> list = venueLogService.selectBySearch(selectType, keyword);
		PageInfo<VenueLog> pageInfo = new PageInfo<>(list);
		
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < list.size(); i++) {
			VenueLog venueLog = list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", venueLog.getId());// ID
			map.put("createtime", DateUtil.getFormat(venueLog.getCreatetime()));// 时间
			map.put("manager", venueLog.getMember().getAppnickname());// 操作人
			map.put("name", venueLog.getVenue().getName());// 场馆
			map.put("venueno", venueLog.getVenue().getVenueno());// 场馆编号
			map.put("content", venueLog.getContent());// 内容
			listMap.add(map);
		}
		return new AdminMessage(100, pageInfo.getTotal(), listMap);
	}
	
	/**  
	 * @Description: 场馆审核所有数据
	 * @author 宋高俊  
	 * @param selectType
	 * @param keyword
	 * @return 
	 * @date 2018年10月15日 下午4:00:48 
	 */ 
	@RequestMapping(value = "/venueCheckList")
	@ResponseBody
	public AdminMessage venueCheckList(AdminPage adminPage) {
		PageHelper.startPage(adminPage.getPage(), adminPage.getLimit());
		List<VenueCheck> list = venueCheckService.selectByCheck();
		PageInfo<VenueCheck> pageInfo = new PageInfo<>(list);
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < list.size(); i++) {
			VenueCheck venueCheck = list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", venueCheck.getId());// ID

			map.put("lng", venueCheck.getLng());// 经度
			map.put("lat", venueCheck.getLat());// 纬度
			
			map.put("createTime", DateUtil.getFormat(venueCheck.getCreateTime()));// 时间
			map.put("trainTeam", venueCheck.getTrainTeam().getTitle());// 上传机构
			map.put("title", venueCheck.getTitle());// 场馆名
			map.put("type", venueCheck.getBallType() == 1 ? "网球场" : venueCheck.getBallType() == 2 ? "足球场" : venueCheck.getBallType() == 3 ? "羽毛球馆" : "篮球馆" );// 球场类型(1=网球场2=足球场3=羽毛球馆4=篮球场)
			map.put("content", venueCheck.getContent());// 描述
			listMap.add(map);
		}
		return new AdminMessage(100, pageInfo.getTotal(), listMap);
	}
	
	/**  
	 * @Description: 场馆审核操作接口
	 * @author 宋高俊  
	 * @param selectType
	 * @param keyword
	 * @return 
	 * @date 2018年10月15日 下午4:00:48 
	 */ 
	@RequestMapping(value = "/venueCheck")
	@ResponseBody
	public ApiMessage venueCheck(HttpServletRequest request, String id, Integer check) {

		Staff staff = (Staff) request.getSession().getAttribute("loginStaffInfo");
		// 修改审核状态
		VenueCheck venueCheck = venueCheckService.selectByPrimaryKey(id);
		venueCheck.setCheckFlag(check);
		venueCheck.setModifyTime(new Date());
		venueCheckService.updateByPrimaryKeySelective(venueCheck);
		
		Venue venue = new Venue();
		venue.setId(Utils.getUUID());
		venue.setCreatetime(new Date());
		venue.setModifytime(new Date());
		venue.setName(venueCheck.getTitle());
		venue.setType(venueCheck.getBallType());
		venue.setTel(venueCheck.getPhone());
		venue.setImage(venueCheck.getHeadImage());
		venue.setLongitude(venueCheck.getLng());
		venue.setLatitude(venueCheck.getLat());
		venue.setAddress(venueCheck.getAddress());
		venueService.insertSelective(venue);
		
		TrainTeamVenue trainTeamVenue = new TrainTeamVenue();
		trainTeamVenue.setId(Utils.getUUID());
		trainTeamVenue.setTrainVenueId(venue.getId());
		trainTeamVenue.setTrainTeamId(venueCheck.getTrainTeamId());
		trainTeamService.saveTrainTeamVenue(trainTeamVenue);
		return new ApiMessage(200, "审核成功");
	}

	/**  
	 * @Description: 场馆认领入驻
	 * @author 宋高俊  
	 * @param id
	 * @return 
	 * @date 2018年10月17日 下午4:46:55 
	 */ 
	@RequestMapping(value = "/venueEnter/list")
	@ResponseBody
	public AdminMessage trainenter(HttpServletRequest request,AdminPage adminPage, Integer checkFlag) {
		Staff staff = (Staff) request.getSession().getAttribute("loginStaffInfo");
		PageHelper.startPage(adminPage.getPage(), adminPage.getLimit());
		List<VenueEnter> list = venueEnterService.selectByEnterAll(checkFlag);
		
		List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < list.size(); i++) {
			VenueEnter venueEnter = list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", venueEnter.getId());// ID
			map.put("createTime", DateUtil.getFormat(venueEnter.getCreateTime()));// 申请时间
			map.put("appnickname", venueEnter.getMember().getAppnickname());// 申请人
			map.put("phone", venueEnter.getMember().getPhone());// 绑定
			map.put("title", venueEnter.getTitle());// 机构名
			map.put("address", venueEnter.getCityName());// 城市
			map.put("mainName", venueEnter.getMainName());// 负责人
			map.put("mainPhone", venueEnter.getMainPhone());// 负责人电话
			map.put("ballType", venueEnter.getBallType() == 1 ? "网球场" : venueEnter.getBallType() == 1 ? "足球场" : venueEnter.getBallType() == 1 ? "羽毛球场" : "篮球场");// 球场类型(1=网球场2=足球场3=羽毛球馆4=篮球场)
			map.put("checkFlag", venueEnter.getCheckFlag() == 0 ? "待核" : venueEnter.getCheckFlag() == 1 ? "通过" : "无效");// 审核状态0=待审核1=审核通过2=审核拒绝
			map.put("rname", venueEnter.getStaff().getName());// 审核人 
			map.put("content", venueEnter.getContent());// 意见
			map.put("checkTime", DateUtil.getFormat(venueEnter.getCheckTime()));// 审核时间
			listMap.add(map);
		}
		return new AdminMessage(0, listMap);
	}
	
	/**  
	 * @Description: 审核机构入驻
	 * @author 宋高俊  
	 * @param request
	 * @param check
	 * @param content
	 * @param id
	 * @return 
	 * @date 2018年10月17日 下午8:44:16 
	 */ 
	@RequestMapping(value = "/venueEnter/check")
	@ResponseBody
	public ApiMessage venueEnterCheck(HttpServletRequest request,Integer check, String content, String id) {
		
		Staff staff = (Staff) request.getSession().getAttribute("loginStaffInfo");
		
		VenueEnter venueEnter = venueEnterService.selectByPrimaryKey(id);
		venueEnter.setContent(content);
		venueEnter.setCheckFlag(check);
		venueEnter.setCheckStaff(staff.getId());
		venueEnter.setCheckTime(new Date());
		int flag = venueEnterService.updateByPrimaryKeySelective(venueEnter);
		if (flag > 0) {
			if (check == 1) {

				// 生成场馆数据
				Venue venue = new Venue();
				venue.setId(Utils.getUUID());
				venue.setCreatetime(new Date());
				venue.setModifytime(new Date());
				venue.setName(venueEnter.getTitle());
				venue.setType(venueEnter.getBallType());
				venue.setTel(venueEnter.getMainPhone());
				venue.setImage(venueEnter.getHeadImage());
				venue.setLongitude(venueEnter.getLongitude());
				venue.setLatitude(venueEnter.getLatitude());
				venue.setAddress(venueEnter.getAddress());
				venueService.insertSelective(venue);
				
				TrainCoach lodTrainCoach = trainCoachService.selectByMemberId(venueEnter.getMemberId());
				TrainTeam trainTeam = new TrainTeam();
				if (lodTrainCoach == null) {
					// 通过审核即创建培训机构
					trainTeam.setId(Utils.getUUID());
					trainTeam.setCreateTime(new Date());
					trainTeam.setModifyTime(new Date());
					trainTeam.setTitle(venueEnter.getTitle());
					trainTeam.setLongitude(venueEnter.getLongitude());
					trainTeam.setLatitude(venueEnter.getLatitude());
					trainTeam.setTeachClass(venueEnter.getBallType() == 1 ? "网球场" : venueEnter.getBallType() == 1 ? "足球场" : venueEnter.getBallType() == 1 ? "羽毛球场" : "篮球场");
					trainTeam.setPhone(venueEnter.getMainPhone());
					// 获取城市数据
					City city = cityService.selectByName(venueEnter.getCityName());
					trainTeam.setCityId(city.getId());
					trainTeam.setAddress(venueEnter.getAddress());
					trainTeam.setLevel(12);
					trainTeam.setLevelTime(new Date());
					trainTeamService.insertSelective(trainTeam);
					// 生成教练数据
					TrainCoach trainCoach = new TrainCoach();
					trainCoach.setId(Utils.getUUID());
					trainCoach.setCreateTime(new Date());
					trainCoach.setModifyTime(new Date());
					trainCoach.setManager(1);
					trainCoach.setMemberId(venueEnter.getMemberId());
					trainCoach.setName(venueEnter.getMainName());
					trainCoach.setType(1);
					trainCoach.setPhone(venueEnter.getMainPhone());
					trainCoach.setTrainTeamId(trainTeam.getId());
					trainCoachService.insertSelective(trainCoach);
				} else {
					trainTeam = trainTeamService.selectByPrimaryKey(lodTrainCoach.getTrainTeamId());
				}
				
				// 生成培训机构管理的场馆数据
				TrainTeamVenue trainTeamVenue = new TrainTeamVenue();
				trainTeamVenue.setId(Utils.getUUID());
				trainTeamVenue.setTrainVenueId(venue.getId());
				trainTeamVenue.setTrainTeamId(trainTeam.getId());
				trainTeamService.saveTrainTeamVenue(trainTeamVenue);
				
			}
			return new ApiMessage(200, "审核成功");
		}
		return new ApiMessage(400, "审核失败");
	}
	
	
	/**
	 * @Description: 场馆导入表格
	 * @author 宋高俊  
	 * @param request
	 * @param file
	 * @return 
	 * @date 2018年9月28日 下午8:58:13 
	 */ 
	@RequestMapping("/importExcel")
	@ResponseBody
	public ApiMessage importExcel(HttpServletRequest request, MultipartFile file) {
//		Staff staff = (Staff) request.getSession().getAttribute("loginStaffInfo");
		
		Map<String, Object> redismap = new HashMap<>();
		int countLine = 0;
		int row = 1;
		logger.info("开始导入场馆execl表格");
		Map<String, Object> map = new HashMap<>();
		List<String> errorlist = new ArrayList<String>();
		List<String> succeedlist = new ArrayList<String>();
		if (file.isEmpty()) {
			logger.info("文件不存在,停止导入");
			return new ApiMessage(400, "导入失败,文件不存在!");
		}
		InputStream in = null;
		List<List<Object>> listob = null;
		try {
			in = file.getInputStream();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		try {
			listob = new ImportExcelUtil().getBankListByExcel(in, file.getOriginalFilename());
		} catch (Exception e) {
			logger.info("文件格式不正确,停止导入!");
			return new ApiMessage(400, "请上传execl文件");
		}
		// 创建一个数值格式化对象
		NumberFormat numberFormat = NumberFormat.getInstance();
		// 设置精确到小数点后2位
		numberFormat.setMaximumFractionDigits(2);
		if (listob != null && listob.size() > 0) {
			countLine = listob.size();
			for (List<Object> excelList : listob) {
				row++;
				String result = numberFormat.format((float) row / (float) (countLine + 1) * 100);
				redismap.put("current", result);
				redismap.put("page", (row-1)+"/"+countLine);
				RedisUtil.addRedis(Global.REDIS_SESSION_UPLOAD_MAP, request.getSession().getId() + "venue", redismap);

				String cityName = excelList.get(0).toString();
				String districtName = excelList.get(1).toString();
				String type = excelList.get(2).toString();
				String venueName = excelList.get(3).toString();
				String phone = excelList.get(4).toString();
				String lng = excelList.get(5).toString();
				String lat = excelList.get(6).toString();
				String address = excelList.get(7).toString();

				if ("无".equals(type)) {
					errorlist.add("第" + row + "行类型为空");
					continue;
				}
				if ("无".equals(venueName)) {
					errorlist.add("第" + row + "行馆名为空");
					continue;
				}
				if ("无".equals(cityName)) {
					errorlist.add("第" + row + "行城市为空");
					continue;
					
				}
				

				Venue nowVenue = new Venue();
				nowVenue.setId(Utils.getUUID());
				nowVenue.setCreatetime(new Date());
				nowVenue.setModifytime(new Date());

				if (!"无".equals(type)) {
					if ("网球场".equals(type)) {
						nowVenue.setType(1);
					} else if ("足球场".equals(type)) {
						nowVenue.setType(2);
					} else if ("羽毛球馆".equals(type)) {
						nowVenue.setType(3);
					} else if ("篮球场".equals(type)) {
						nowVenue.setType(4);
					}
				}

				// 第一个条件，场馆名是否存在
				City city = cityService.selectByName(cityName);
				if (city == null) {
					city = new City();
					city.setId(Utils.getUUID());
					city.setCity(cityName);
					city.setHotflag(0);
					city.setInitial(ChineseCharacterUtil.getPinYingLetter(cityName));
					city.setVenuesum(0);
					cityService.insertSelective(city);
				}
				nowVenue.setCityid(city.getId()); // 城市ID
				
				Venue oldVenue = venueService.selectByVenueCity(venueName, city.getId());

				if (oldVenue != null) {
					errorlist.add("第" + row + "行场馆已存在");
					continue;
				}
				nowVenue.setName(venueName);// 场馆名称

				// 第二个条件，经纬度是否存在
				String mapGetCity = "";
				String mapGetDistrict = "";
				String mapGetAddress = "";
				if (!"无".equals(lng) && !"无".equals(lat)) {

					nowVenue.setLongitude(Double.parseDouble(lng));// 经度
					nowVenue.setLatitude(Double.parseDouble(lat));// 纬度

					// 使用百度地图根据经纬度获取地址信息
					String jsonString = HttpUtils.sendGet("http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&location=" + lat + "," + lng
							+ "&output=json&pois=0&ak=" + Global.Baidu_Map_KRY, null);
					if (!StringUtil.isBank(jsonString)) {
						try {
							jsonString = jsonString.replace("renderReverse&&renderReverse(", "");
							jsonString = jsonString.substring(0, jsonString.length() - 1);
							JSONObject jsonObject = JSONObject.fromObject(jsonString);

							mapGetCity = jsonObject.getJSONObject("result").getJSONObject("addressComponent").getString("city");
							mapGetDistrict = jsonObject.getJSONObject("result").getJSONObject("addressComponent").getString("district");
							mapGetAddress = jsonObject.getJSONObject("result").getString("formatted_address");

							mapGetCity = mapGetCity.substring(0, mapGetCity.length() - 1);
							mapGetDistrict = mapGetDistrict.substring(0, mapGetDistrict.length() - 1);

							nowVenue.setAddress(mapGetAddress);// 场馆地址
						} catch (Exception e) {

						}
					}
				}

				// 第三个条件，城市是否存在
				if (!"".equals(mapGetCity)) {
					cityName = mapGetCity;
				}

				// 第四个条件，区县是否存在
				if (!"".equals(mapGetDistrict)) {
					districtName = mapGetDistrict;
				}
				if (!"无".equals(districtName)) {
					District district = districtService.selectByName(districtName);
					if (district == null) {
						district = new District();
						district.setId(Utils.getUUID());
						district.setDistrict(districtName);
						district.setCityid(city.getId());
						districtService.insertSelective(district);
					}
					nowVenue.setDistrictid(district.getId()); // 区县ID
				}

				nowVenue.setTel(phone);

				// 如果表格中有地址则使用表格地址
				if (!"无".equals(address)) {
					nowVenue.setAddress(address);
				}

				// 保存场馆数据
				try {
					venueService.insertSelective(nowVenue);
					succeedlist.add("第" + row + "行导入成功");
				} catch (Exception e) {
					errorlist.add("第" + row + "行未知错误");
				}
			}
		} else {
			logger.info("文件没有内容,停止导入!");
			return new ApiMessage(400, "请填写的模板表格内容!");
		}
		map.put("count", countLine);// 总条数
		map.put("succeed", succeedlist.size());// 成功条数
		map.put("error", errorlist.size());// 失败条数

		map.put("succeedlist", succeedlist);// 成功条数
		map.put("errorlist", errorlist);// 失败条数
		return new ApiMessage(200, "导入成功", map);
	}
	
}